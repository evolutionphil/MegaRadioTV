Mega Radio API Documentation
Complete API reference for React Native apps, Smart TVs (Samsung Tizen, LG webOS), and web applications.

Base URLs:

Production: https://themegaradio.com
Production Alt: https://megaradio.live
üì∫ Smart TV Developers
Quick Start for Smart TVs
CRITICAL: All Smart TV requests MUST include the ?tv=1 query parameter to disable compression.

// ‚ùå WRONG
const url = 'https://themegaradio.com/api/translations/en';
// ‚úÖ CORRECT
const url = 'https://themegaradio.com/api/translations/en?tv=1';
Comprehensive Guides
üì∫ Samsung TV (Tizen) Integration Guide

Complete implementation guide with code examples
Translation system integration
Remote control handling
Audio streaming with error recovery
Performance optimization techniques
üì∫ LG TV (webOS) Integration Guide

webOS service integration
Device information access
Toast notifications
Remote control mapping
Complete app structure
üîß Troubleshooting Guide

Common issues and solutions
Error handling strategies
Network debugging
Complete API testing suite
üìñ Translation System Guide

623 translation keys across 48 languages
Samsung TV-specific keys
Implementation examples
Smart TV API Checklist
‚úÖ Use production URLs (https://themegaradio.com or https://megaradio.live)
‚úÖ Include ?tv=1 parameter in ALL requests
‚úÖ Set User-Agent header: Tizen/6.0 Samsung TV or webOS TV
‚úÖ Implement proper error handling with retry logic
‚úÖ Cache API responses for better performance
‚úÖ Handle remote control events
‚úÖ Implement audio auto-reconnect
‚úÖ Test on actual TV hardware
Table of Contents
Smart TV Integration ‚¨ÜÔ∏è
Authentication
Stations
User Management
Favorites & Social
Discovery & Recommendations
Geo & Location
Genres, Countries, Languages
Streaming
Push Notifications
Search
Smart TV Specific
Smart TV Specific Endpoints
Get Translations (with TV parameter)
GET /api/translations/:lang?tv=1
Supported Languages: en, tr, de, fr, es, it, pt, nl, ru, pl, sv, da, no, fi, el, hu, cs, sk, ro, bg, hr, sr, sl, lv, lt, et, af, zu, zh, ja, ko, hi, th, vi, id, ms, tl, ar, he, fa, ur, bn, ta, te, mr, gu, kn, ml, pa, sw, am
Response: {
  "guide_discover_title": "Discover Radio",
  "now_playing": "Now Playing",
  "play": "Play",
  "pause": "Pause",
  "add_to_favorites": "Add to Favorites",
  ... (623 total keys)
}
Example:

// Samsung TV / LG TV
const response = await fetch('https://themegaradio.com/api/translations/en?tv=1', {
  headers: {
    'User-Agent': 'Tizen/6.0 Samsung TV', // or 'webOS TV'
    'Accept': 'application/json'
  }
});
const translations = await response.json();
Get Stations (with TV parameter)
GET /api/stations?tv=1&country={country}&limit={limit}
Query Parameters:
  - tv: "1" (REQUIRED for Smart TVs)
  - country: Country name or "all"
  - limit: Number of stations (default: 50, max: 100)
  - genre: Genre slug
  - search: Search term
  - sort: "votes", "recent", "random"
Response: {
  "stations": [...],
  "pagination": {...}
}
Get Popular Stations (with TV parameter)
GET /api/stations/popular?tv=1&limit=50
Response: [
  {
    "_id": "...",
    "name": "Station Name",
    "url": "https://...",
    "url_resolved": "https://...", // Use this for streaming
    "favicon": "https://...",
    "country": "United States",
    "codec": "MP3",
    "bitrate": 128,
    "votes": 12345,
    "tags": ["pop", "top40"]
  },
  ...
]
Get Genres (with TV parameter)
GET /api/genres?tv=1
GET /api/genres/discoverable?tv=1
Response: {
  "data": [
    {
      "_id": "genre-pop",
      "name": "Pop",
      "slug": "pop",
      "stationCount": 5432,
      "poster": "/images/genres/pop.jpg"
    },
    ...
  ]
}
Get Countries (with TV parameter)
GET /api/countries?tv=1
Response: [
  "Afghanistan",
  "Albania",
  "Algeria",
  ...
  (120+ countries)
]
Authentication
Sign Up
POST /api/auth/signup
Body: {
  "email": "user@example.com",
  "password": "password123",
  "username": "johndoe",
  "displayName": "John Doe"
}
Response: { "user": {...}, "message": "User created successfully" }
Login
POST /api/auth/login
Body: {
  "email": "user@example.com",
  "password": "password123"
}
Response: { "user": {...}, "message": "Login successful" }
Get Current User
GET /api/auth/me
Headers: Cookie with session
Response: { "user": {...} }
Logout
POST /api/auth/logout
Response: { "message": "Logged out successfully" }
Google OAuth (Web Flow)
GET /api/auth/google
- Redirects to Google OAuth
GET /api/auth/google/callback
- Callback endpoint after Google auth
Update Profile
PUT /api/auth/profile
Headers: Cookie with session (requireAuth)
Body: {
  "displayName": "New Name",
  "bio": "My bio",
  "avatar": "https://...",
  "preferences": {
    "theme": "dark",
    "language": "en",
    "autoplay": true,
    "volume": 0.8
  }
}
Response: { "user": {...} }
Stations
Get All Stations
GET /api/stations?page=1&limit=50&search=rock&country=US&language=en&genre=pop&sort=votes
Query Parameters:
  - page: Page number (default: 1)
  - limit: Items per page (default: 50, max: 200)
  - search: Search term
  - country: Country code (e.g., "US")
  - language: Language code (e.g., "en")
  - genre: Genre slug (e.g., "pop")
  - sort: "votes", "recent", "random", "clickcount"
  
Response: {
  "stations": [...],
  "pagination": {
    "total": 60000,
    "page": 1,
    "limit": 50,
    "totalPages": 1200
  }
}
Get Station by ID or Slug
GET /api/station/:identifier
- identifier can be MongoDB _id or slug
Response: { 
  "station": {
    "_id": "...",
    "name": "Station Name",
    "slug": "station-name-us",
    "url": "https://...",
    "favicon": "https://...",
    "country": "US",
    "language": "en",
    "tags": ["pop", "rock"],
    "votes": 1234,
    "clickcount": 5678,
    "codec": "MP3",
    "bitrate": 128,
    "homepage": "https://...",
    "geo_lat": 40.7128,
    "geo_long": -74.0060
  }
}
Get Popular Stations
GET /api/stations/popular?limit=50&country=US&language=en&genre=pop
Response: { "stations": [...] }
Get Working Stations (Verified Streaming)
GET /api/stations/working?limit=100&country=US
Response: { "stations": [...] }
Get Nearby Stations (GPS-based)
GET /api/stations/nearby?lat=40.7128&lng=-74.0060&radius=100&limit=50
Query Parameters:
  - lat: Latitude
  - lng: Longitude
  - radius: Radius in km (default: 50)
  - limit: Max results (default: 50)
  
Response: { 
  "stations": [...],
  "totalStations": 123
}
Get Stations with Geolocation
GET /api/stations/with-geo?page=1&limit=50
Response: {
  "stations": [...],
  "pagination": {...}
}
Get Similar Stations
GET /api/stations/similar/:stationId?limit=10
Response: { "stations": [...] }
Station Metadata (Now Playing)
GET /api/stations/:stationId/metadata
Response: {
  "metadata": {
    "title": "Song Name",
    "artist": "Artist Name",
    "album": "Album Name"
  }
}
Report Station Error
POST /api/stations/report-error
Body: {
  "stationId": "...",
  "errorType": "not_playing|broken_stream|wrong_info",
  "description": "Additional details"
}
Response: { "message": "Error reported successfully" }
User Management
Get User Profile
GET /api/users/:userId
Response: { 
  "user": {
    "_id": "...",
    "username": "johndoe",
    "displayName": "John Doe",
    "avatar": "https://...",
    "bio": "Music lover",
    "followersCount": 123,
    "followingCount": 45,
    "favoriteStations": [...],
    "recentlyPlayedStations": [...]
  }
}
Search Users
GET /api/users/search?q=john&limit=20
Response: { "users": [...] }
Get All Users (Paginated)
GET /api/users?page=1&limit=50
Response: {
  "users": [...],
  "pagination": {...}
}
Get Public Profiles
GET /api/public-profiles?limit=10
Response: { "users": [...] }
Favorites & Social
Get User Favorites
GET /api/users/:userIdOrSlug/favorites
Response: { 
  "favoriteStations": [...],
  "user": {...}
}
Get Recently Played
GET /api/users/:id/recent
Response: { 
  "recentStations": [...],
  "user": {...}
}
Follow User
POST /api/user/follow/:userId
Headers: Cookie with session (requireAuth)
Response: { "message": "Followed successfully" }
Unfollow User
DELETE /api/user/unfollow/:userId
Headers: Cookie with session (requireAuth)
Response: { "message": "Unfollowed successfully" }
Get Followers
GET /api/user/followers/:userId
Response: { 
  "followers": [...],
  "count": 123
}
Get Following
GET /api/user/following/:userId
Response: { 
  "following": [...],
  "count": 45
}
Check if Following
GET /api/user/is-following/:userId
Headers: Cookie with session (requireAuth)
Response: { "isFollowing": true }
Discovery & Recommendations
Get ML-Powered Recommendations
GET /api/ml/recommendations/:sessionId?limit=20&country=US&language=en
Response: { 
  "recommendations": [...],
  "algorithm": "collaborative_filtering|content_based|hybrid"
}
Track User Interaction (for ML)
POST /api/ml/track-interaction
Body: {
  "sessionId": "...",
  "stationId": "...",
  "interactionType": "play|favorite|skip|share",
  "duration": 120
}
Response: { "message": "Interaction tracked" }
Get Diverse Recommendations
GET /api/recommendations/diverse?limit=20&country=US&language=en&genre=pop
Response: { "stations": [...] }
Discover Top 100
GET /api/discover/top100?country=US&genre=pop&timeRange=week
Query Parameters:
  - country: Country code
  - genre: Genre slug
  - timeRange: "day", "week", "month", "all"
  
Response: { "stations": [...] }
Discover Search
GET /api/discover/search?q=jazz&type=station&limit=20
Query Parameters:
  - q: Search query
  - type: "station", "artist", "album", "track"
  - limit: Results limit
  
Response: { "results": [...] }
Geo & Location
Get User Location (IP-based)
GET /api/location
Response: {
  "country": "US",
  "countryCode": "US",
  "region": "CA",
  "city": "San Francisco",
  "lat": 37.7749,
  "lon": -122.4194,
  "timezone": "America/Los_Angeles"
}
Get Global Cities
GET /api/cities/global?limit=100
Response: { "cities": [...] }
Get Regions
GET /api/regions
Response: { "regions": [...] }
Get Region Details
GET /api/regions/:regionSlug
Response: { 
  "region": {...},
  "countries": [...]
}
Get Country in Region
GET /api/regions/:regionSlug/:countrySlug
Response: { 
  "country": {...},
  "cities": [...]
}
Get Stations by Region/Country/City
GET /api/regions/:regionSlug/:countrySlug/:citySlug?/stations?page=1&limit=50
Response: {
  "stations": [...],
  "pagination": {...}
}
Genres, Countries, Languages
Get All Genres
GET /api/genres
Response: { "genres": [...] }
Get Genre by Slug
GET /api/genres/slug/:slug
Response: { 
  "genre": {
    "slug": "pop",
    "name": "Pop",
    "poster": "https://...",
    "stationCount": 5000
  }
}
Get Stations by Genre
GET /api/genres/:slug/stations?page=1&limit=50&country=US&sort=votes
Response: {
  "stations": [...],
  "pagination": {...},
  "genre": {...}
}
Get Discoverable Genres
GET /api/genres/discoverable
Response: { "genres": [...] }
Get All Countries
GET /api/countries
Response: { 
  "countries": [
    {
      "name": "United States",
      "iso_3166_1": "US",
      "stationcount": 15000
    },
    ...
  ]
}
Get All Languages
GET /api/languages
Response: { 
  "languages": [
    {
      "name": "English",
      "iso_639": "en",
      "stationcount": 25000
    },
    ...
  ]
}
Get All Codecs
GET /api/codecs
Response: { 
  "codecs": [
    {
      "name": "MP3",
      "stationcount": 40000
    },
    ...
  ]
}
Streaming
Direct Stream URL
GET /api/stream/*
- Proxies HTTP streams and converts formats
- Handles CORS for cross-origin requests
- Example: /api/stream/http://radio.example.com:8000/stream
HLS Stream (for session-based stations)
GET /api/stream-hls/:stationId
- Converts any format to HLS (HTTP Live Streaming)
- Uses FFmpeg for transcoding
- Compatible with all mobile players
Image Proxy
GET /api/image/*
- Proxies station logos/favicons
- Handles CORS
- Example: /api/image/http://radio.example.com/logo.png
Stream Stats
GET /api/stream-stats
Response: {
  "activeStreams": 123,
  "totalRequests": 45678
}
HLS Diagnostics
GET /api/hls-diagnostics
Response: {
  "hlsSessions": [...],
  "ffmpegProcesses": 5
}
Push Notifications
Get VAPID Public Key
GET /api/push/vapid-public-key
Response: { 
  "publicKey": "BNxw7R..." 
}
Subscribe to Push Notifications
POST /api/user/push-subscription
Headers: Cookie with session (requireAuth)
Body: {
  "subscription": {
    "endpoint": "https://...",
    "keys": {
      "p256dh": "...",
      "auth": "..."
    }
  }
}
Response: { "message": "Subscription saved" }
Unsubscribe from Push
DELETE /api/user/push-subscription
Headers: Cookie with session (requireAuth)
Response: { "message": "Subscription removed" }
Send Test Notification
POST /api/push/send-test
Headers: Cookie with session (requireAuth)
Body: {
  "title": "Test",
  "body": "This is a test notification"
}
Response: { "message": "Test notification sent" }
Now Playing Notification
POST /api/push/now-playing
Headers: Cookie with session (requireAuth)
Body: {
  "stationId": "...",
  "track": "Song Name",
  "artist": "Artist Name"
}
Response: { "message": "Notification sent" }
Search
Advanced Station Search
GET /api/discover/search?q=jazz+cafe&country=US&language=en&genre=jazz&bitrate=128&codec=MP3
Query Parameters:
  - q: Search term
  - country: Country code
  - language: Language code
  - genre: Genre slug
  - bitrate: Minimum bitrate
  - codec: Audio codec
  
Response: { 
  "results": [...],
  "total": 234
}
Translations (Multilingual)
Get Translations for Language
GET /api/translations/:lang
- lang: Language code (e.g., "en", "es", "fr", "de", "tr")
Response: {
  "language": "en",
  "translations": {
    "home": "Home",
    "search": "Search",
    "favorites": "Favorites",
    ...
  }
}
Supported Languages (48 total): en, es, fr, de, it, pt, ru, ja, zh, ar, tr, pl, nl, sv, no, da, fi, cs, hu, ro, el, th, ko, vi, id, ms, hi, bn, ta, te, ur, fa, he, uk, bg, sr, hr, sk, sl, et, lv, lt, is, ga, sq, mk, am, sw

Radio Browser Integration
Get Radio Browser Stats
GET /api/radio-browser/stats
Response: {
  "supported_version": 1,
  "software_version": "1.0.0",
  "status": "OK",
  "stations": 60000,
  "stations_broken": 1234,
  "tags": 5000,
  "clicks_last_hour": 12345,
  "clicks_last_day": 123456,
  "languages": 200,
  "countries": 120
}
Get Top Clicked Stations
GET /api/radio-browser/top-clicked?limit=100
Response: { "stations": [...] }
Get Top Voted Stations
GET /api/radio-browser/top-voted?limit=100
Response: { "stations": [...] }
Get Recent Stations
GET /api/radio-browser/recent?limit=100
Response: { "stations": [...] }
Response Formats
Station Object
{
  "_id": "507f1f77bcf86cd799439011",
  "changeuuid": "920e3f15-...",
  "stationuuid": "920e3f15-...",
  "name": "KEXP 90.3 FM",
  "slug": "kexp-90-3-fm-us",
  "url": "https://kexp-mp3-128.streamguys1.com/kexp128.mp3",
  "url_resolved": "https://...",
  "homepage": "https://kexp.org",
  "favicon": "https://kexp.org/favicon.ico",
  "tags": ["indie", "alternative", "rock"],
  "country": "US",
  "countrycode": "US",
  "state": "Washington",
  "language": "en",
  "languagecodes": "en",
  "votes": 5234,
  "clickcount": 125678,
  "clicktrend": 150,
  "codec": "MP3",
  "bitrate": 128,
  "hls": 0,
  "lastcheckok": 1,
  "lastchecktime": "2025-10-08T10:00:00Z",
  "clicktimestamp": "2025-10-08T09:55:00Z",
  "geo_lat": 47.6062,
  "geo_long": -122.3321,
  "has_extended_info": true,
  "ssl_error": 0
}
User Object
{
  "_id": "507f1f77bcf86cd799439011",
  "email": "user@example.com",
  "username": "johndoe",
  "displayName": "John Doe",
  "slug": "johndoe",
  "avatar": "https://...",
  "bio": "Music enthusiast",
  "isPublic": true,
  "favoriteStations": ["stationId1", "stationId2"],
  "recentlyPlayedStations": [
    {
      "stationId": "...",
      "playedAt": "2025-10-08T10:00:00Z"
    }
  ],
  "preferences": {
    "theme": "dark",
    "language": "en",
    "autoplay": true,
    "volume": 0.8,
    "notifications": {
      "nowPlaying": true,
      "newFollower": true,
      "favoriteAdded": false
    }
  },
  "followersCount": 123,
  "followingCount": 45,
  "createdAt": "2024-01-01T00:00:00Z"
}
Error Responses
All endpoints return errors in this format:

{
  "error": "Error message description",
  "code": "ERROR_CODE",
  "status": 400
}
Common Status Codes:

200 - Success
201 - Created
400 - Bad Request
401 - Unauthorized
403 - Forbidden
404 - Not Found
429 - Too Many Requests
500 - Internal Server Error
Rate Limiting
General APIs: 100 requests/minute per IP
Auth endpoints: 10 requests/minute per IP
Streaming: No rate limit
Authentication for React Native
Cookie-Based Sessions (Recommended)
After login, the server sets a session cookie. Include credentials in fetch:

// Login
const response = await fetch('https://themegaradio.com/api/auth/login', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  credentials: 'include', // Important!
  body: JSON.stringify({ email, password })
});
// Subsequent authenticated requests
const user = await fetch('https://themegaradio.com/api/auth/me', {
  credentials: 'include'
});
For React Native (AsyncStorage + Cookie Manager)
Use @react-native-cookies/cookies or @react-native-async-storage/async-storage:

import CookieManager from '@react-native-cookies/cookies';
// After login, cookies are automatically managed
// Just use credentials: 'include' in fetch
WebSocket Support (Coming Soon)
Real-time features planned:

Live now-playing updates
Chat in station rooms
Live listener counts
Best Practices
Caching: Cache station lists, genres, and countries for 1 hour
Pagination: Always use pagination for large datasets
Images: Use /api/image/* proxy for CORS-safe images
Streaming: Use /api/stream-hls/:id for reliable playback on all devices
Offline: Cache favorite stations and user profile locally
Location: Request location permission for nearby stations feature
Push: Implement web push for engagement (notifications)
Support
For API issues or questions:

Email: support@themegaradio.com
GitHub Issues: [Your repo]
Documentation: https://themegaradio.com/api/docs
Last Updated: October 2025
API Version: v1.0
Base URLs:

Production: https://themegaradio.com
Production Alt: https://megaradio.live